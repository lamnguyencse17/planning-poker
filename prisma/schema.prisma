// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextIndex"]
}

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Story         Story[]
    Votes         Votes[]
    Epic          Epic[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Epic {
    id          String      @id @default(cuid())
    name        String
    description String      @db.Text
    status      StoryStatus @default(TODO)

    createdById String
    createdBy   User   @relation(fields: [createdById], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
    stories   Story[]

    @@index([createdById, status, updatedAt(sort: Desc)])
}

model Story {
    id           String      @id @default(cuid())
    name         String
    ticketNumber String?
    description  String?
    url          String?
    epicId       String?
    epic         Epic?       @relation(fields: [epicId], references: [id])
    status       StoryStatus @default(TODO)
    createdById  String
    createdBy    User        @relation(fields: [createdById], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
    Votes     Votes[]

    @@index([createdById, status, updatedAt(sort: Desc)])
}

model Votes {
    id        String   @id @default(cuid())
    points    Int
    storyId   String
    story     Story    @relation(fields: [storyId], references: [id])
    userId    String
    user      User?    @relation(fields: [userId], references: [id])
    voterName String?
    comments  String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@index([userId, updatedAt(sort: Desc)])
}

enum StoryStatus {
    TODO
    READY_TO_VOTE
    VOTING
    DONE
}
